#!/bin/bash

#####
#
#  Script for creating new scripts and setting up test directories
#  Author: Steven Barclay
#
#####

set -e

## For Debugging purposes
#set -x

MOI=$(basename "$0")
LOG_FILE=$(dirname "$0")/${MOI}.log
TEMPLATE_DIR="${HOME}/.script-templates"
YAML_DIR="${HOME}/.yamls"
SCRIPT_TEMPLATE="${TEMPLATE_DIR}/script-template"
TEST_SCRIPT_TEMPLATE="${TEMPLATE_DIR}/test-template"
TEST_SETUP_TEMPLATE="${TEMPLATE_DIR}/test-setup-template"
SCRIPTS_YAML="${YAML_DIR}/scripts.yml"

if [ "${RUNNING_TESTS}" ] ; then
  LOG_FILE="resources/test-script-creation.log"
  RESOURCES_DIR="resources"
  SCRIPT_TEMPLATE="${RESOURCES_DIR}/script-template"
  TEST_SCRIPT_TEMPLATE="${RESOURCES_DIR}/test-template"
  TEST_SETUP_TEMPLATE="${RESOURCES_DIR}/test-setup-template"
  SCRIPTS_YAML="${RESOURCES_DIR}/scripts.yml"
fi

onExit() {
  echo "$(date +'%b %d %H:%M:%S') ${MOI}: ${msg}" >> ${LOG_FILE}
  exit "$1"
} ; trap onExit 1 2 3 15 ERR

usage() {
  echo "Usage: script-creation -n [script name] -l [location] -d [description]"
  echo "  Options:"
  echo "    -n: Name of script being created"
  echo "    -l: Location of the script"
  echo "    -d: Description of the script"
  echo "    -a: Alias for the script"
  echo "    -h: Display usage message"
}

getUserInfo() {
  getent passwd | grep "$(whoami)" | awk -F ":" '{print $5}' | awk -F "," '{print $1}'
}

createScript() {
  local scriptLoc=$1

  cp ${SCRIPT_TEMPLATE} "${scriptLoc}"
  chmod +x "${scriptLoc}"
  sed -i 's/\[FILENAME\]/'"${SCRIPT_NAME}"'/' "${scriptLoc}"
  sed -i 's/\[DESCRIPTION\]/'"${DESCRIPTION}"'/' "${scriptLoc}"
  sed -i 's/\[USAGE\]/'"${SCRIPT_NAME}"'/' "${scriptLoc}"
  sed -i 's/\[DATE\]/'"$(date)"'/' "${scriptLoc}"
  sed -i 's/\[AUTHOR\]/'"$(getUserInfo)"'/' "${scriptLoc}"
  sed -i 's/\[VERSION\]/1.0/' "${scriptLoc}"
}

createTestScripts() {
  local destDir=$1
  cp ${TEST_SCRIPT_TEMPLATE} "${destDir}/test-${SCRIPT_NAME}"
  chmod +x "${destDir}/test-${SCRIPT_NAME}"
  sed -i 's/\[SETUP_SCRIPT\]/test-'"${SCRIPT_NAME}"'-setup/' "${destDir}/test-${SCRIPT_NAME}"

  cp ${TEST_SETUP_TEMPLATE} "${destDir}/test-${SCRIPT_NAME}-setup"
  sed -i 's/\[SCRIPT_LOC\]/..\/'"${SCRIPT_NAME}"'/' "${destDir}/test-${SCRIPT_NAME}-setup"
  sed -i 's/\[TEST_SCRIPT\]/test-'"${SCRIPT_NAME}"'/' "${destDir}/test-${SCRIPT_NAME}-setup"
}

updateYaml() {
  if [ "${ALIAS}" ] ; then
    sed -i '/scripts:/a \ \ \ \ alias:\ '"${ALIAS}" ${SCRIPTS_YAML}
  fi
  sed -i '/scripts:/a \ \ \ \ description:\ '"${DESCRIPTION}" ${SCRIPTS_YAML}
  sed -i '/scripts:/a \ \ \ \ location:\ '"${SCRIPT_DIR}"'\/' ${SCRIPTS_YAML}
  sed -i '/scripts:/a \ \ '"${SCRIPT_NAME}"':' ${SCRIPTS_YAML}
}

until [ -z "$1" ] 
do
  case $1 in
    '-n')
      SCRIPT_NAME="$2"
      shift
      ;;
    '-l')
      LOCATION="$2"
      shift
      ;;
    '-d')
      DESCRIPTION="$2"
      shift
      ;;
    '-a')
      ALIAS="$2"
      shift
      ;;
    '-h')
      usage
      onExit 0
      ;; 
    *)
      invalidArg=$1
      ;;
  esac
  if [ "${invalidArg}" ] ; then
    usage
    msg="${msg:+$msg } Invalid argument found."
    onExit 2
  fi
  shift
done

if [ ! "${SCRIPT_NAME}" ] ; then
  msg="${msg:+$msg } A script name must be provided"
  onExit 1
fi

if [ ! "${LOCATION}" ] ; then
  msg="${msg:+$msg } Location must be provided"
  onExit 2
fi

if [ ! "${DESCRIPTION}" ] ; then
  msg="${msg:+$msg } Description must be provided"
  onExit 3
fi

SCRIPT_DIR="${LOCATION}/${SCRIPT_NAME}"

mkdir -p "${SCRIPT_DIR}/test/resources"

createScript "${SCRIPT_DIR}/${SCRIPT_NAME}"
createTestScripts "${SCRIPT_DIR}/test"
updateYaml

:
